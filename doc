/**
 * @openapi
 * components:
 *  schemas:
 *    User:
 *      type: object
 *      required:
 *        - username
 *        - email
 *        - password
 *      properties:
 *        username:
 *          type: string
 *          description: Unique username of a new user
 *        email:
 *          type: email
 *          description: Email of the a new User
 *        password:
 *          type: string
 *          description: Password of a new user
 *      example:
 *        username: "christian"
 *        email: "christian@mail.com"
 *        password: "33442211"
 *
 */

/**
 * @openapi
 * tags:
 *  name: Users
 *  description: User Management API
 */

/**
 * @openapi
 * /users/auth/register:
 *  post:
 *    summary: Creates a new User.
 *    tags: [Users]
 *    requestBody:
 *      required: true
 *    content:
 *      application/json:
 *        schema:
 *          $ref:'#/components/schemas/User'
 *    response:
 *      201:
 *        description: User Created Successfully
 *        content:
 *          application/json:
 *            schema:
 *              $ref: '#/components/schemas/User'
 *      403:
 *        description: Not Authenticated
 */

 /**
 * @openapi
 * /users:
 *  get:
 *     summary: Returns list of users
 *     tags: [Users]
 *     responses:
 *       200:
 *         description: List of Users
 *         content:
 *          application/json:
 *            schema:
 *              type: array
 *              items:
 *                $ref: "#/components/schemas/User"
 */

 /**
 * @openapi
 * /users/{id}:
 *  get:
 *    summary: Get a user by ID
 *    tags: [Users]
 *    parameters:
 *      - in: path
 *        name: id
 *        schema:
 *          type: string
 *        required: true
 *        description: User Id
 *    responses:
 *      200:
 *        description: The user description by id
 *        contents:
 *          appplication/json:
 *            schema:
 *              $ref: '#/components/schemas/User'
 *      404:
 *        description: The user was not found
 */


import swaggerJSDoc from "swagger-jsdoc";
import swaggerUi from "swagger-ui-express";


 // Swagger Setup

const options = {
  definition: {
    openapi: "3.0.1",
    info: {
      title: "REST API for Swagger Documentation",
      version: "1.0.0",
    },
    schemes: ["http", "https"],
    servers: [{ url: `http://localhost:${process.env.PORT}/` }],
  },
  apis: [`${__dirname}/routes/*.ts`],
};
const swaggerSpec = swaggerJSDoc(options);
app.use("/api-docs", swaggerUi.serve, swaggerUi.setup(swaggerSpec));

// Docs in JSON format
app.get("/docs.json", (req: Request, res: Response) => {
  res.setHeader("Content-Type", "application/json");
  res.send(swaggerSpec);
});


const logger = winston.createLogger({
  level: "info",
  format: winston.format.json(),
  defaultMeta: { service: "user-service" },
  transports: [
    //
    // - Write all logs with importance level of `error` or less to `error.log`
    // - Write all logs with importance level of `info` or less to `combined.log`
    //
    new winston.transports.File({ filename: "error.log", level: "error" }),
    new winston.transports.File({ filename: "combined.log" }),
  ],
});

//
// If we're not in production then log to the `console` with the format:
// `${info.level}: ${info.message} JSON.stringify({ ...rest }) `
//
if (process.env.NODE_ENV !== "production") {
  logger.add(
    new winston.transports.Console({
      format: winston.format.simple(),
    })
  );
}


................
To rebuild the Prisma schema, you'll primarily use prisma db pull to update your schema based on your database and then either prisma migrate dev to create and apply migrations or prisma db push to apply schema changes directly to the database. 
Here's a breakdown of the process:
1. Introspect the Database:
Use npx prisma db pull to update your schema.prisma file with the current structure of your database.
This command reads the database schema and reflects it in your Prisma schema file. 
2. Generate and Apply Migrations (Relational Databases):
If you're working with a relational database, you'll use prisma migrate dev to generate a migration based on changes in your schema and apply it to the database. 
prisma migrate dev will prompt you to reset the database if necessary and then apply the migration. 
For MongoDB, you'll typically use prisma db push instead of migrations. 
3. Apply Schema Changes Directly (MongoDB):
For MongoDB, prisma db push directly applies schema changes to your database. 
4. Generate Prisma Client:
After any changes to your schema, run prisma generate to update the generated Prisma Client code.
This ensures that your application code is aware of the latest schema changes. 
Important Considerations:
Schema Drift:
If you make changes directly to your database (e.g., in production), it can lead to schema drift, where your database schema is out of sync with your Prisma schema. 
Data Loss:
When using prisma db push or applying migrations, be aware that changes to your schema (like removing fields) might result in data loss. 
Development vs. Production:
Use prisma migrate dev for development and testing. For production, use prisma migrate deploy or prisma db push (for MongoDB). 
Multiple Schema Files:
If you are using multiple schema files, ensure you have previewFeatures = ["prismaSchemaFolder"] in your generator client block within your schema.prisma file, according to a guide on Medium. 