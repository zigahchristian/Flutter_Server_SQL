// main.dart
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:cloudinary_flutter/cloudinary_context.dart';
import 'package:cloudinary_url_gen/cloudinary.dart';
import 'firebase_options.dart'; // This file is generated by `flutterfire configure`
import 'screens/profile_screen.dart';
import 'models/user_model.dart'; // Ensure these paths are correct
import 'services/database_service.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  // Initialize Cloudinary SDK globally for image display
  // Replace 'YOUR_CLOUD_NAME' with your actual Cloudinary cloud name
  CloudinaryContext.cloudinary = Cloudinary.fromCloudName(cloudName: 'YOUR_CLOUD_NAME');

  // Anonymous sign-in for demonstration. In a real app, you'd use proper user authentication.
  await FirebaseAuth.instance.signInAnonymously();

  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Profile Picture App',
      theme: ThemeData(
        primarySwatch: Colors.blue,
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      home: StreamBuilder<User?>(
        // Listen to Firebase Auth state changes
        stream: FirebaseAuth.instance.authStateChanges(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Scaffold(
              body: Center(child: CircularProgressIndicator()),
            );
          }
          if (snapshot.hasData && snapshot.data != null) {
            // User is signed in, get their UID
            final String userId = snapshot.data!.uid;
            // Ensure a user document exists for this anonymous user
            // This is a simple way to create a user document if it doesn't exist.
            // In a real app, this would be part of a user registration/login flow.
            DatabaseService().getUser(userId).first.then((user) {
              if (user == null) {
                DatabaseService()._firestore.collection('users').doc(userId).set({
                  'id': userId,
                  'name': 'Anonymous User', // Default name for anonymous users
                  'profilePictureUrl': null,
                });
              }
            });
            return ProfileScreen(userId: userId);
          }
          // If no user, show a loading or error screen (though signInAnonymously should prevent this)
          return const Scaffold(
            body: Center(child: Text('Please sign in to continue.')),
          );
        },
      ),
    );
  }
}

// models/user_model.dart
class User {
  final String id;
  final String name;
  final String? profilePictureUrl; // Nullable for when there's no picture yet

  User({required this.id, required this.name, this.profilePictureUrl});

  // Convert a User object into a Map for database storage
  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'name': name,
      'profilePictureUrl': profilePictureUrl,
    };
  }

  // Create a User object from a Map
  factory User.fromMap(Map<String, dynamic> map) {
    return User(
      id: map['id'] as String,
      name: map['name'] as String,
      profilePictureUrl: map['profilePictureUrl'] as String?,
    );
  }
}


// services/cloudinary_service.dart
import 'dart:io';
import 'package:http/http.dart' as http;
import 'dart:convert';

class CloudinaryService {
  final String cloudName;
  final String uploadPreset;
  // For secure deletion, you would typically have a backend endpoint.
  // Replace with your backend's delete endpoint if you have one.
  final String? backendDeleteEndpoint;

  CloudinaryService({
    required this.cloudName,
    required this.uploadPreset,
    this.backendDeleteEndpoint,
  });

  Future<String?> uploadImage(File imageFile) async {
    final url = Uri.parse('https://api.cloudinary.com/v1_1/$cloudName/upload');
    final request = http.MultipartRequest('POST', url)
      ..fields['upload_preset'] = uploadPreset
      ..files.add(await http.MultipartFile.fromPath(
        'file',
        imageFile.path,
      ));

    try {
      final response = await request.send();
      if (response.statusCode == 200) {
        final responseData = await response.stream.toBytes();
        final result = jsonDecode(String.fromCharCodes(responseData));
        return result['secure_url']; // This is the URL to save
      } else {
        print('Cloudinary upload failed with status: ${response.statusCode}');
        print('Response body: ${await response.stream.bytesToString()}');
        return null;
      }
    } catch (e) {
      print('Error uploading image to Cloudinary: $e');
      return null;
    }
  }

  /// Attempts to delete an image from Cloudinary.
  ///
  /// IMPORTANT: Direct client-side deletion of Cloudinary images using unsigned
  /// upload presets is NOT supported or recommended due to security concerns.
  /// Cloudinary's `destroy` API requires a signature, which means it should be
  /// done from a secure backend server.
  ///
  /// This function provides a conceptual implementation for how you would
  /// interact with a backend endpoint to securely delete an image.
  /// Replace `backendDeleteEndpoint` with your actual backend URL.
  ///
  /// [publicId] The public ID of the image to delete.
  /// [userId] (Optional) The ID of the user performing the deletion, for backend authorization.
  Future<bool> deleteImageFromCloudinary(String publicId, {String? userId}) async {
    print('Attempting to delete image with Public ID: $publicId');

    if (backendDeleteEndpoint == null || backendDeleteEndpoint!.isEmpty) {
      print('Error: No backend delete endpoint configured. Direct client-side deletion is insecure.');
      return false;
    }

    try {
      final response = await http.post(
        Uri.parse(backendDeleteEndpoint!),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({
          'publicId': publicId,
          'userId': userId, // Pass user ID for backend authorization
        }),
      );

      if (response.statusCode == 200) {
        print('Image deletion request sent to backend successfully.');
        return true;
      } else {
        print('Backend deletion failed with status: ${response.statusCode}');
        print('Backend response: ${response.body}');
        return false;
      }
    } catch (e) {
      print('Error sending deletion request to backend: $e');
      return false;
    }
  }
}


// services/database_service.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:your_app_name/models/user_model.dart'; // Adjust import path based on your project structure

class DatabaseService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  // Save/Update user profile picture URL
  Future<void> saveUserProfilePicture(String userId, String imageUrl) async {
    try {
      await _firestore.collection('users').doc(userId).set(
        {'profilePictureUrl': imageUrl},
        SetOptions(merge: true), // Merge to update only the profilePictureUrl field
      );
      print('Profile picture URL saved for user: $userId');
    } catch (e) {
      print('Error saving profile picture URL: $e');
    }
  }

  // Remove user profile picture URL
  Future<void> removeUserProfilePicture(String userId) async {
    try {
      await _firestore.collection('users').doc(userId).set(
        {'profilePictureUrl': FieldValue.delete()}, // Remove the field
        SetOptions(merge: true),
      );
      print('Profile picture URL removed for user: $userId');
    } catch (e) {
      print('Error removing profile picture URL: $e');
    }
  }

  // Get user data as a stream for real-time updates
  Stream<User?> getUser(String userId) {
    return _firestore.collection('users').doc(userId).snapshots().map((snapshot) {
      if (snapshot.exists && snapshot.data() != null) {
        return User.fromMap(snapshot.data()!);
      }
      return null;
    });
  }
}


// screens/profile_screen.dart
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:io';
import 'package:cloudinary_flutter/image/cld_image.dart';
import 'package:cloudinary_url_gen/transformation/transformation.dart';
import 'package:cloudinary_url_gen/transformation/delivery/quality.dart';
import 'package:your_app_name/services/cloudinary_service.dart'; // Adjust import path
import 'package:your_app_name/services/database_service.dart'; // Adjust import path
import 'package:your_app_name/models/user_model.dart'; // Adjust import path
import 'package:image_downloader/image_downloader.dart'; // New import for image downloading
import 'package:permission_handler/permission_handler.dart'; // For handling permissions

class ProfileScreen extends StatefulWidget {
  final String userId; // Pass the current user's ID

  const ProfileScreen({Key? key, required this.userId}) : super(key: key);

  @override
  State<ProfileScreen> createState() => _ProfileScreenState();
}

class _ProfileScreenState extends State<ProfileScreen> {
  final ImagePicker _picker = ImagePicker();
  late CloudinaryService _cloudinaryService;
  late DatabaseService _databaseService;

  User? _currentUser;
  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    _cloudinaryService = CloudinaryService(
      cloudName: 'YOUR_CLOUD_NAME', // Replace with your actual Cloudinary cloud name
      uploadPreset: 'YOUR_UNSIGNED_UPLOAD_PRESET', // Replace with your unsigned upload preset
      // IMPORTANT: Replace with your backend's delete endpoint if you have one.
      // Example: backendDeleteEndpoint: 'https://your-backend.com/api/delete-cloudinary-image',
      backendDeleteEndpoint: null, // Set to null if you don't have a backend endpoint
    );
    _databaseService = DatabaseService();

    // Listen to user data changes from Firestore
    _databaseService.getUser(widget.userId).listen((user) {
      setState(() {
        _currentUser = user;
      });
    });
  }

  // Helper to show a simple message box (instead of alert())
  void _showMessage(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(message)),
    );
  }

  Future<void> _pickAndUploadImage() async {
    final XFile? pickedFile = await _picker.pickImage(source: ImageSource.gallery);

    if (pickedFile != null) {
      setState(() {
        _isLoading = true;
      });

      final File imageFile = File(pickedFile.path);
      final String? imageUrl = await _cloudinaryService.uploadImage(imageFile);

      if (imageUrl != null) {
        await _databaseService.saveUserProfilePicture(widget.userId, imageUrl);
        _showMessage('Profile picture updated successfully!');
      } else {
        _showMessage('Failed to upload image.');
      }

      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<void> _removeProfilePicture() async {
    // Show a confirmation dialog
    final bool? confirm = await showDialog<bool>(
      context: context,
      builder: (BuildContext dialogContext) {
        return AlertDialog(
          title: const Text('Confirm Deletion'),
          content: const Text('Are you sure you want to remove your profile picture?'),
          actions: <Widget>[
            TextButton(
              child: const Text('Cancel'),
              onPressed: () {
                Navigator.of(dialogContext).pop(false); // Dismiss dialog, return false
              },
            ),
            TextButton(
              child: const Text('Remove', style: TextStyle(color: Colors.red)),
              onPressed: () {
                Navigator.of(dialogContext).pop(true); // Dismiss dialog, return true
              },
            ),
          ],
        );
      },
    );

    if (confirm == true) {
      setState(() {
        _isLoading = true;
      });

      // Extract public ID from the current URL if it exists to attempt Cloudinary deletion
      String? publicId;
      if (_currentUser?.profilePictureUrl != null && _currentUser!.profilePictureUrl!.isNotEmpty) {
        // Example: https://res.cloudinary.com/cloud_name/image/upload/v12345/folder/image_name.jpg
        // Public ID would be 'folder/image_name'
        final uri = Uri.parse(_currentUser!.profilePictureUrl!);
        final pathSegments = uri.pathSegments;
        if (pathSegments.length >= 4) { // Expecting at least 'image', 'upload', 'version', 'public_id'
          // The public ID is typically the last segment after 'upload/v...'
          // We need to handle cases where there are folders.
          // A more robust way would be to save the publicId directly when uploading.
          // For now, let's try to extract it from the URL.
          // This is a simplified extraction, assuming no complex transformations in the URL path.
          final String fullPath = pathSegments.sublist(pathSegments.indexOf('upload') + 2).join('/');
          publicId = fullPath.split('.').first; // Get rid of file extension
        }
      }

      if (publicId != null) {
        // Attempt to delete from Cloudinary via backend.
        // The result of this call (true/false) indicates if the request was sent to backend.
        // Actual deletion success would be handled by the backend and might involve webhooks.
        await _cloudinaryService.deleteImageFromCloudinary(publicId, userId: widget.userId);
      }

      // Remove the URL from the database regardless of Cloudinary deletion success
      await _databaseService.removeUserProfilePicture(widget.userId);
      _showMessage('Profile picture removed!');

      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<void> _downloadProfilePicture() async {
    if (_currentUser?.profilePictureUrl == null || _currentUser!.profilePictureUrl!.isEmpty) {
      _showMessage('No profile picture to download.');
      return;
    }

    setState(() {
      _isLoading = true;
    });

    try {
      // Request storage permission
      var status = await Permission.storage.request();
      if (status.isGranted) {
        // If permission is granted, proceed with download
        final String? path = await ImageDownloader.downloadImage(
          _currentUser!.profilePictureUrl!,
          destination: AndroidDestinationType.directoryPictures, // Save to Pictures directory
          imageType: ImageType.PNG, // Or JPEG, depending on your image type
        );

        if (path != null) {
          _showMessage('Image downloaded to: $path');
        } else {
          _showMessage('Failed to download image.');
        }
      } else {
        _showMessage('Storage permission denied. Cannot download image.');
        // Optionally, guide the user to app settings
        openAppSettings();
      }
    } catch (e) {
      _showMessage('Error downloading image: $e');
      print('Error downloading image: $e');
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Edit Profile'),
        centerTitle: true,
      ),
      body: Center(
        child: _currentUser == null
            ? const CircularProgressIndicator() // Show loading while fetching user data
            : SingleChildScrollView(
                padding: const EdgeInsets.all(20.0),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Stack(
                      alignment: Alignment.center,
                      children: [
                        CircleAvatar(
                          radius: 80,
                          backgroundColor: Colors.grey[200],
                          child: _currentUser!.profilePictureUrl != null &&
                                  _currentUser!.profilePictureUrl!.isNotEmpty
                              ? ClipOval(
                                  child: CldImageWidget(
                                    // Extract public ID from the URL for CldImageWidget
                                    // This assumes the URL format is consistent:
                                    // https://res.cloudinary.com/cloud_name/image/upload/v<version>/<public_id>.<extension>
                                    publicId: _currentUser!.profilePictureUrl!
                                        .split('/')
                                        .last
                                        .split('.')
                                        .first,
                                    width: 160,
                                    height: 160,
                                    fit: BoxFit.cover,
                                    // Apply a simple transformation for a circular image
                                    transformation: Transformation()
                                      ..quality(Quality.auto()),
                                  ),
                                )
                              : Icon(
                                  Icons.person,
                                  size: 80,
                                  color: Colors.grey[600],
                                ),
                        ),
                        if (_isLoading)
                          const Positioned.fill(
                            child: Center(
                              child: CircularProgressIndicator(),
                            ),
                          ),
                      ],
                    ),
                    const SizedBox(height: 20),
                    Text(
                      'User ID: ${widget.userId}', // Display user ID for debugging/identification
                      style: const TextStyle(fontSize: 14, color: Colors.grey),
                      textAlign: TextAlign.center,
                    ),
                    const SizedBox(height: 10),
                    Text(
                      'User Name: ${_currentUser!.name}',
                      style: const TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
                      textAlign: TextAlign.center,
                    ),
                    const SizedBox(height: 30),
                    ElevatedButton.icon(
                      onPressed: _isLoading ? null : _pickAndUploadImage,
                      icon: const Icon(Icons.add_a_photo),
                      label: const Text('Add/Change Profile Picture'),
                      style: ElevatedButton.styleFrom(
                        padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 12),
                        textStyle: const TextStyle(fontSize: 16),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(10),
                        ),
                      ),
                    ),
                    const SizedBox(height: 10),
                    if (_currentUser!.profilePictureUrl != null &&
                        _currentUser!.profilePictureUrl!.isNotEmpty) ...[
                      ElevatedButton.icon(
                        onPressed: _isLoading ? null : _removeProfilePicture,
                        icon: const Icon(Icons.delete_forever),
                        label: const Text('Remove Profile Picture'),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.red,
                          padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 12),
                          textStyle: const TextStyle(fontSize: 16),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(10),
                          ),
                        ),
                      ),
                      const SizedBox(height: 10),
                      ElevatedButton.icon(
                        onPressed: _isLoading ? null : _downloadProfilePicture,
                        icon: const Icon(Icons.download),
                        label: const Text('Download Profile Picture'),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.green,
                          padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 12),
                          textStyle: const TextStyle(fontSize: 16),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(10),
                          ),
                        ),
                      ),
                    ],
                  ],
                ),
              ),
      ),
    );
  }
}

// pubspec.yaml (add these dependencies)
/*
dependencies:
  flutter:
    sdk: flutter
  image_picker: ^1.1.2 # For picking images from gallery/camera
  http: ^1.2.1 # For making HTTP requests to Cloudinary API
  firebase_core: ^2.30.0 # Firebase core
  firebase_auth: ^4.19.0 # Firebase authentication
  cloud_firestore: ^4.17.4 # Firebase Firestore database
  cloudinary_url_gen: ^1.0.0 # Cloudinary URL generation
  cloudinary_flutter: ^1.0.0 # Cloudinary Flutter SDK for image display
  image_downloader: ^0.31.0+1 # NEW: For downloading images
  permission_handler: ^11.3.1 # NEW: For handling permissions

dev_dependencies:
  flutter_test:
    sdk: flutter
  flutter_lints: ^3.0.0
  firebase_tools: ^0.0.1 # This is a placeholder, usually firebase_cli is installed globally
*/

// firebase_options.dart (This file is generated by `flutterfire configure`)
// Example content (your actual content will vary based on your Firebase project)
/*
// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, TargetPlatform;

class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return const FirebaseOptions(
          apiKey: 'YOUR_ANDROID_API_KEY',
          appId: 'YOUR_ANDROID_APP_ID',
          messagingSenderId: 'YOUR_MESSAGING_SENDER_ID',
          projectId: 'YOUR_PROJECT_ID',
          storageBucket: 'YOUR_STORAGE_BUCKET',
        );
      case TargetPlatform.iOS:
        return const FirebaseOptions(
          apiKey: 'YOUR_IOS_API_KEY',
          appId: 'YOUR_IOS_APP_ID',
          messagingSenderId: 'YOUR_MESSAGING_SENDER_ID',
          projectId: 'YOUR_PROJECT_ID',
          storageBucket: 'YOUR_STORAGE_BUCKET',
          iosClientId: 'YOUR_IOS_CLIENT_ID',
          iosBundleId: 'YOUR_IOS_BUNDLE_ID',
        );
      case TargetPlatform.macOS:
        return const FirebaseOptions(
          apiKey: 'YOUR_MACOS_API_KEY',
          appId: 'YOUR_MACOS_APP_ID',
          messagingSenderId: 'YOUR_MESSAGING_SENDER_ID',
          projectId: 'YOUR_PROJECT_ID',
          storageBucket: 'YOUR_STORAGE_BUCKET',
          iosClientId: 'YOUR_MACOS_CLIENT_ID',
          iosBundleId: 'YOUR_MACOS_BUNDLE_ID',
        );
      case TargetPlatform.web:
        return const FirebaseOptions(
          apiKey: 'YOUR_WEB_API_KEY',
          appId: 'YOUR_WEB_APP_ID',
          messagingSenderId: 'YOUR_MESSAGING_SENDER_ID',
          projectId: 'YOUR_PROJECT_ID',
          authDomain: 'YOUR_PROJECT_ID.firebaseapp.com',
          storageBucket: 'YOUR_STORAGE_BUCKET',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'go to https://firebase.google.com/docs/flutter/setup#configure-cli',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'go to https://firebase.google.com/docs/flutter/setup#configure-cli',
        );
    }
  }
}
*/
